/* Banana-Chat - The first Open Source Knuddels Emulator
 * Copyright (C) 2011 - 2012 Flav <http://banana-coding.com>
 * 
 * Diese Dateien unterliegen dem Coprytight von Banana-Coding und
 * darf verändert, aber weder in andere Projekte eingefügt noch
 * reproduziert werden.
 * 
 * Der Emulator dient - sofern der Client nicht aus Eigenproduktion
 * stammt - nur zu Lernzwecken, das Hosten des originalen Knuddels Clients
 * ist auf eigene Gefahr und verstößt möglicherweise gegen Schutzrechte
 * der Knuddels.de GmbH & Co KG
 * 
 * Autoren: Flav (Grundversion), Localhost (Erweiterte Version), Kokos-Ice (Erweiterte Version)
 */



package starlight;

import features.bomb;
import game.WordMixRecord;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.regex.Pattern;
import tools.*;
import tools.Reloader;
import tools.database.ConnectionPool;
import tools.database.PoolConnection;
import update.UpdateServer;

public class Server {
	private final static Server instance;
	private final Map<String, Client> clients;
	private final static ModuleTree moduleTree;
	Client butler;
	private List<String> logins;
	public static Map<String, Channel> channels;
        public static List<String> butlertips;
	public static Map<String, Integer> badwords;
	public static Map<String, String> macros;
	public static Map<String, String[]> help;
	public static Map<Integer, String[]> tutorials;
	public static Map<String, String[]> functions;
	public static Map<String, String> james;
	public static Map<String, String> umfragen;
         public static Map<String, String[]> defaultmessages;
	public static Map<Integer,String> werbung;
        public static Map<String, String> settings;
        public static String existeffekts = "|butterfly~butterfly~Nicklist-Butterfly||rose~roseNick:COLOR~Nicklist-Rose||crown~crownNick:GENDER~Nicklist-Krone||flames~flame~Nicklist-Flame|light~holy~Nicklist-Holy|god~god~Nicklist-God|glamour~glamour~~Nicklist-Glamour|glow~glow~Nicklist-Glow|monster~monster~Nicklist-Monster|devilish~devilish~Nicklist-Devilish|angel~angel~Nicklist-Angel|rainbow~rainbow~Nicklist-Rainbow|nickkiss~nickkiss~Nicklist-Nickkiss|mirror~mirror~Nicklist-Mirror|neon~neon~Nicklist-Neon|";
        public static List<String[]> news;
	public static Map<String, String[]> elections;
        public static Map<String, String> quiz;
        
        
        public static Map<String, String> quiz_classic;
        public static Map<String, String> quiz_translate;
        public static Map<String, String> quiz_mathe;
        
        public static Map<String, String> translate;
        public static Map<String, String> mathe;
        public static ArrayList<String> mix; 
	public static Map<String, String[]> toplisten;
	public static Map<String, String> permissions;
	public static List<String> onlineUsers;
        public static Map<String, Smiley> smileys;
        public static Map<String, Gratis> gratis;
        public static Map<String, Smiley> smileys2;
        public static Map<String, String[]> tauschen;             
        public static Map<String, String[]> leihen;
        public static Map<String, Verliehen> verliehen;
        public static Map<String, Kategorie> kategorie;
        public static Map<String, Favs> fav;         
        public static Map<String, Usersmiley> usersmileys;
        public static Map<String, Codes> codes;
        public static Map<String, Feature> feature;        
	public static Map<String, String[]> statistik;
	public static Map<String, String[]> plz;
	public static Map<String, String> todo;
	public static Map<String, String[]> syslog;
	public static Map<String, String[]> lotto;
	public static Map<String, Integer> luftlinie;
	public static Map<Long, String[]> actions;
	public static Map<Long, String[]> snp;
	public static ArrayList<String> sexy;
        public static ArrayList<String> cool;
	public static ArrayList<String> wordmix;
	public static Map<String, String> lockedNicks;
	public static Map<Integer, String[]> invite;
	private int lottoJackpot, allKnuddels, allKontoKnuddels;
	private long update;
	static long serverOnline = System.currentTimeMillis()/1000;
        public static Module main;
        public static String moduletree = "1776010635;20;PROTOCOL_HASH;CONFIRM_PROTOCOL_HASH;PROTOCOL_CONFIRMED;PROTOCOL_DATA;CHANGE_PROTOCOL;TEXT;CMD;LABEL;CHANNEL_NAME;IMAGE;SOUND;NICK;TITLE;INT_TIME_MILLIS;TIMEOUT_SECONDS;DURATION;INTERVAL;RED;GREEN;BLUE;COLOR_RGB;FONTSIZE;INT_ID;INT_HASH;INT_VALUE;SHORT_ID;STRING_ID;TIMESTAMP;SEGMENT_ID;SLOT_ID;BYTE_ID;VALID;SELECTED;FOCUS;SHORT_TIME_MILLIS;DEFAULT_COLOR;DEFAULT_FONTSIZE;TEXTPANELTEXT;STRING_MAP;CONFIG;STRING_MAP_ENTRY;STRING_KEY;STRING_VALUE;MOUSEX;MOUSEY;EVENT_ID;WINDOW_ID;EVENT_SEQ;EVENT;TEXT_COLOR;BACKGROUND_COLOR;TOP_FADE_FROM;MIDDLE_FADE_TO;BOTTOM_SOLID;SPECULAR_SHADING;IS_DIFF;BIN_DATA;ZINDEX;WINDOWX;WINDOWY;LOCKTIME;PROCTIME;WINDOW;REC_STATTIME;REC_BYTES;REC_TIME;REC_ATIME;REC_ABYTES;REC_PEAKB;REC_RETRIES;RECSTAT;STAT1;FEEDBACK_DOMAIN;FEEDBACK_KEY;SERVER_FEEDBACK;OPENED_FS_ID;FRAMESTRING_CLOSED;FRAMESTRING_NOT_FOUND;FRAMESTRING_INITIALIZE_OPENED;CLASS_NAME;PREFETCH_MODULE;FS_STRING;UPDATE_PANELID;UPDATE_OPENED_FRAMESTRING;OPEN_REUSE_FRAMESTRING;BUTTON;ANALOG_BUTTON;SHOW_BUTTONS;BUTTON_ALIGN;CHAT_FUNCTION;NR_ANALOG_SEGMENTS;SEND_INTERVAL_MILLIS;COOLDOWN_INTERVAL_MILLIS;NICK_ICON;SORT_ICON_NICKNAMES_TO_TOP;SHOW_PREFIXICONS;REMOVE_ALL_PREFIXICONS;MODULE_ID;TIMEOUT_SECONDS_TOTAL;TIMEOUT_SECONDS_HURRY_UP;MAX_VOTES;MIN_VOTE_TOKEN_LINES;VOTE_TOKEN;MAX_VISIBLE_LOG_LINES;LOG_LINE;SHOW_BLOOD_BAR;TOKEN_CLICK_TEMPLATE;NR_STATUS_LINES;STATUS_BAR;STATUS_ABOVE_LOG;NO_TEXT_SNIPPING;SHOW_VOTEBOX;VOTE_COUNT;UPDATE_VOTEBOX;SET_VOTEBOX_LOG;SET_VOTEBOX_STATUS;REMOVE_VOTEBOX;FINALIZE_VOTEBOX;UPDATE_VOTEBOX_TIMEOUT;BORDER_COLOR;VOTE_BARS_SETTING;VOTEBOX_BOX_SETTING;VOTEBOX_BUTTON_SETTING;TIMOUT_BAR_SETTING;VOTEBOX_SETTINGS;IMAGE_ID;VOTEBOX_IMAGE_CLICKED_SUCCESS;VOTE_BAR_WIN;VOTE_BAR_FIRST;VOTE_BAR_DRAW_FIRST;VOTE_BAR_REG;VOTE_BAR_LOSE;FOUR_COLOR_BAR;COLOR_TOP_TOP;COLOR_TOP;COLOR_BOT;COLOR_BOT_BOT;TOP_BOX_BACKGROUND_COLOR;TOP_BOX_TEXT_COLOR;MIDDLE_BOX_BACKGROUND_IMAGE;USE_BOLD_VOTE_TOKENS;CONTENT_AREA_PIXEL_WIDTH;TIMEOUT_BAR;BAR;SHOW_BARS;BAR_LENGTH_PIXEL;SIMPLE_BAR_UPDATE;BAR_TREND;BUTTON_TREND;ANALOG_TREND;BUTTON_BAR_SETTINGS;HEADER_BOX_TEXT;HEADER_BOX_UPDATE;REMOVE_HEADER_BOX;SEARCH_REQUEST_PARAMETERS;SEARCH_SORT_MODE;RESULT_COUNT_MINIMUM_NEEDED;SEARCH_NEW_REQUEST;AGE_FROM;AGE_TO;GENDER;SEARCH_REASON;SEARCH_TAG;SEARCH_OPTION;SHOW_MEMBERS_NEAR_ME;SHOW_NEW_MEMBERS;SEXUAL_ORIENTATION;OTHERS_FIND_ME_WHEN;UPDATE_FRIENDS;REQUEST_TOP_SEARCH_TAGS;RESULT_COUNT_START_OFFSET;SEARCH_UPDATE_REQUEST;STORE_SEARCH_OPTIONS;LOGIN_NICK;SEARCHER_AGE;SEARCHER_GENDER;SEARCHER_HAS_ZIP_CODE;SEARCHES_FIRST_TIME;OPEN_SEARCH_CHANNEL;RESULT;RESULT_START_INDEX;ESTIMATED_RESULT_COUNT;CLEAR_OLD_RESULTS;SEARCH_RESULT;FRIEND_RESULT;AGE;CURRENT_CHANNEL;IS_AFK;DISTANCE;MATCHING_PERCENT;IS_ONLINE;SEND_HI_OK;MINI_RESULT;SEARCH_RESULTS_CHANGED_ONLINESTATUS;CAME_ONLINE_RESULTS;GONE_OFFLINE_NICKS;FRIEND_RESULT_CHANGED_ONLINESTATUS;SHOW_TOP_SEARCH_TAGS;WHOIS_CONTENT;SHOW_MINIWHOIS;KEY_VALUE;MODULE_INIT;KEY;VALUE;COMMA_SEPARATED_NICK_LIST;INITIAL_TEXT;POST_OLD_MSG_TEXT;CLIENT_PP;IMAGE_PREFETCH;SOUND_PREFETCH;NICKLIST_SORT_TOGETHER;APPSTATS;BINGO_SHEET_ID;BINGO_SHEET_MATRIX_SIZE;BINGO_FIELD_STATES;INDEX;BINGO_PATTERN_ROW_WIDTH;MES_ID;BINGO_GAME_MESSAGE;BINGO_FIELD;BINGO_SHEET_STATE_CONST;BINGO_SHEET;BINGO_PATTERN_REFLECTED;BINGO_PATTERN;BINGO_CALLED_NUMBER;BINGO_FIELD_UPDATE;BINGO_SHEET_UPDATE;BINGO_ROUND;BINGO_HISTORY_UPDATE;BINGO_INIT;BINGO_UPDATE;BINGO_ACTIVE_TEXT;BINGO_ACTIVE_BUTTON_LABEL;BINGO_ACTIVE_BUTTON_COMMAND;BINGO_SET_STATE;FILENAME;PLAY_SOUND;SI_ID;SI_NAME;SI_DESCRIPTION;SI_LEVEL;SI_STOCKCOUNT;SI_COUNTDOWN_TO_REVEAL;SI_COUNTDOWN_TO_OUTOFSTOCK;SI_PRICE_EUROCENT;SI_PRICE_KNUDDELS;SI_OWNINGCOUNT;SI_LOCK;SI_CATEGORY;SHOP_ITEM;SHOP_BUTTON;SHOP_MAINTAB;SHOP_BUTTONS;TAB_ID;SHOP_TAB;SHOP_SUBTABS;TAB_ALIGNMENT;TAB_IMAGES;TAB_IMAGE_NORMAL;TAB_IMAGE_ACTIVE;TAB_IMAGE_HOVER;ACTIVATE;UPDATE_SHOP_TAB;LOGO_IMAGE;SHOP_TITLE;USER_IMAGE;LOCALE;SHOP_USERSTATUS;SHOP_HEADER;UPDATE_SHOP_USERSTATUS;UPDATE_SHOP_ITEM;PERSONAL_HISTORY;NEW_SHOP_ITEMS;RECOMMENDED_SHOP_ITEMS;SHOP_MYSHOP;SHOP_VIEW;SHOP_MYSHOP_ITEM;REFERRAL_INFOTEXT;RESET_SCROLL_POS;SHOP_REFERRALS;SHOP_CLEAR_ITEMCACHE;ACTIVATE_SELECTMODE;DEACTIVATE_SELECTMODE;SHOP_CLOSED;SHOP_REQUEST_ITEM_DETAILS;SHOP_CALL_OTHER;SHOP_REQUEST_ITEMS;INSTANT_WHOIS_CONTENT;SERVE_INSTANT_WHOIS;FORCED_SERVE_INSTANT_WHOIS;PANEL_SETTINGS;CONTENT_AREA_PIXEL_HEIGHT;IMAGEBOX_ID;SERVE_INSTANT_WHOIS_MISSING_USER;NICKLIST_COLOR;HI_WHOIS;INSTANT_WHOIS_PREFETCH_ITEM;INSTANT_WHOIS_PREFETCH;APPLET_INT_CONFIG_PARAM;APPLET_STRING_CONFIG_PARAM;CONFIGURE_APPLET;APPLET_INT_CONFIG_KEY;APPLET_STRING_CONFIG_KEY;SEND_CHANGED_CONFIGURE_APPLET;REQUEST_INSTANT_WHOIS;REQUEST_RESPONSE_TIME;VIEW_TIME;INSTANT_WHOIS_STATS;W2_CONTENT;W2_HASHCODES;WAS_REQUESTED;SERVE_W2_NEW_WINDOW;W2_TARGET_WINDOW_ID;SERVE_W2;SERVE_W2_UPDATE;W2_TABS;W2_HEADER;W2_LEFT_COLUMN;W2_SELECTED_CENTER_TAB;W2_CENTER_COLUMN;W2_RIGHT_COLUMN;W2_SELECTED_BG;W2_TAB;SHOW_PARAMETER;W2_PARENTTAB_ID;W2_EDIT_COMMAND;ONLY_CENTER_COLUMN;W2_TARGET_WINDOW_ID_FLAGS;PAGE;CLOSED;FORCE_NO_MISSING;ADMIN_NO_MISSING;SOURCEID;REQUEST_W2;HASH_W2_TABS;HASH_W2_HEADER;HASH_W2_LEFTCOLUMN;HASH_W2_CENTERCOLUMN;HASH_W2_RIGHTCOLUMN;CLOSED_W2;CHANNELS;HI_BOX_ADDLINE;HI_BOX_REMOVE_LINE;HI_BOX_REMOVE_BOX;MESSAGE_OVERVIEW_UPDATE;POST_COUNT_CHANGED;PLZ;USERPLZ;REQUEST_DECODE;DECODE;SERVE_DECODE;PIXEL_URL;DEBUG_NOTIFY_USER;LOAD_TRACKING_PIXEL;CATEGORY;WEB_ANALYTICS;SELECTED_ID;ANCHOR_ID;OWNER_NICK;REQUEST_W2EDIT;W2E_ENTRY;SAVE_W2E;ACTIONTYPE;W2E_ACTION;W2E_ACTIONLIST;SUGREQID;SUGTYPE;SUGTOKEN;SUGREQ;SUGRES;W2E_HEADER;MENU_ENTRY;WHOIS2_EDIT;COMPONENT_ID;LAYOUT_ITEM;POSITION;DIMENSION;LAYOUT_ITEM_TYPE;CONTENT;LAYOUT_ITEM_FLAG;LABEL_FONTSIZE;WIDTH;HEIGHT;XPOS;YPOS;SUCCESSFUL;WHOIS2_SAFE_RESULT;CAMPAIGNID;GUEST_APPLET_LOADED;STATUS_CODE;GNICK;GPASSWORD;GCHANNEL;GUEST_CREATED;PREFFERED_CHANNEL;LOGIN_GUEST;GUEST_REGISTERED;ELEMENT_CLICKED_SUCCESS;W2GROUP_HEADER;W2GROUP_LEFT_COLUMN;W2GROUP_CENTER_COLUMN;SERVE_W2GROUP;MEMBERTYPE;REQUEST_W2GROUP;FROM_NICK;TO_NICK;SEND_FEEDBACK;WANDERING_KNUDDEL;WANDERING_KNUDDEL_DONE;TAB_NAME;OPEN_ON_LOAD;CLOSE_ON_INSERT;BOX_POSITION;USE_TRANSPARENCY;USE_ANIMATIONS;SB_TABS;SMILEY;SMILEY_SPECIAL;ADVERTISEMENT;SB_TAB;SB_TAB_HASH_CODE;REMOVE_SMILEY_LIST;INSERT_SMILEY_LIST;SB_TAB_DELTA;SB_TAB_DIRTY;SB_TAB_UPDATE_CHECK;REPLACEMENT_INDEX_MAP;SMILEY_INDEX_MAP;INDEX_POSITION;REPLACEMENT;AMOUNT;NAME;FAVORITE;SMILEY_INDEX;FEATURE_CMD;FEATURE_NAME;FEATURE_COOLDOWN;SB_DETAILS;SB_FAVORITE;SB_INVALIDATE;FORCE_PUSH;PUSH_DELAY;MAXLOCKTIME;LOCKFACTOR;START_DV;UPLOAD_DELAY_MS;DV_DATA;METADATA;DV_SHOW;REQUEST_SB_TABS;REQUEST_SB_TAB;REQUEST_SB_TAB_DELTA;REQUEST_SB_TAB_UPDATE_CHECK;REQUEST_SB_DETAIL;TARGET_REPLACEMENT;REORDER_FAVORITES;STAT;SHOULD_LOG;STAT_REPORT;COUNT;HEARTLIGHT;HEARTLIGHT_DONE;NEXT_DATE_MODUL;FUNCTIONS;PARAMS;ACTIVATE_FUNCTIONS;DEACTIVATE_FUNCTIONS;NUM_COCONUTS;GAME_ID;PPS;NEW_COCONUT_GAME;COCONUT_ID;COCONUT_COLLECT;END_COCONUT_GAME;ENABLED;ACTIVE;SHOW_ARROW;FOTOMEET;SET_FOREGROUND_IMAGE_BOX;SPRITE_NAME;SPRITE;GET_PP_META;UPDATE_PP_META;REMOVE_PP_META;ADD_PP_META;MAY_HIDE;PP_META;PP_ONLINE;PPF_GET;PPF_USER;PPF_DATA;SINGLE;SETTINGS;ACTIONCMD;APPLETACTION;TB_ENTRY;TB_OWN_ENTRY;TB_BUY_ENTRY;TB_DATA;SERIES;TAGS;RARENESS;KPRICE;CPRICE;INDEX_SHORT;TREND;AVGPRICE;OPRICE;TB_REASON;TB_TAG_ENTRY;TB_TAG_DATA;TB_UPDATE_ENTRY;TB_UPDATE;TB_KNUDDELS;PERCENT;TB_RANK;TB_OWN;TB_FAVS;TX_ID;CANCEL;TB_SELECT;TB_OPEN;REQUEST_TB_DATA;REQUEST_TB_UPDATE;REQUEST_TB_CHANGES;REQUEST_DETAIL_UPDATE;TREASUREHUNT_START;FOUND;TREASUREHUNT_END;TREASUREHUNT_LITTER;GAME_ID_LONG;MOSKITO_START;MOSKITO_END;MOSKITO_KILLED;AIRPORT;AIRPORT_ID;SHOW_WORLD;COUNTRY;IS_PREMIUM;VISITED;FROM_ID;TO_ID;PLANE_TYPE;PLANE_IMAGE;PLANE_SHADOW;PLANE_WARP_BG;PLANE_SOUND;BRIFFIT_IMAGE;BRIFFIT_SPACING;SEND_PLANE;CURRENT_TANK;TIME_REMAINING;REACH;OVERLAY_MSG;FLY_TO;SHOW_MAP;JS;MYMACRO_SHOW;STAR;STAR_SHOW;STAR_ADD;STAR_REMOVE;SECURITYTOKEN;EMAIL;ERRORSTR;START_OPTIN_VERIFY;OPTIN_VERIFY;NICKNAME;IMG_VERSION;FRIENDLISTTYPE;ONLINE_STATUS;ONLINE_CHANNEL;LAST_CHANNEL_TIME;PROFILE_IMAGE_HIDDEN;README;USERINFO;LAST_ACTIVE_TIME;ONLINE_STATUS_TYPE;PROFILE_PHOTO_VISIBLE;CHANGED_PROFILE_PHOTO;REQUEST_FRIENDS;FRIEND_LIST;MAX_LAST_PROFILE_VIEWERS;REQUEST_PROFILE_VIEWERS;PROFILE_VIEWERS_COUNT;PROFILE_VIEWERS_ENABLED;PROFILE_VIEWERS_LIST;SHOW_PROFILE_VIEWERS;UPDATE_PROFILE_VIEWERS;SET_SHOW_PROFILE_VIEWERS;SEND_PROFILE_VIEWERS;XMAS_SEGMENT_CONFIG;XMAS_PRESENTS;XMAS_ORNAMENT_CONFIG;XMAS_LAMETTA_CONFIG;XMAS_CANDLE_CONFIG;XMAS_GARLAND_CONFIG;XMAS_TOPPING_CONFIG;XMAS_WRAPPING_CONFIG;XMAS_CALENDAR_CONFIG;XMAS_FIRE_CONFIG;ROOM_CONFIG;XMAS_ORNAMENTS;XMAS_LAMETTAS;XMAS_CANDLES;XMAS_WRAPPING_SIZE;XMAS_CALENDAR_ID;XMAS_FIRE_ID;XMAS_PRESENT;XMAS_PRESENTHILLS;XMAS_TREE_ORNAMENT;XMAS_TREE_LAMETTA;XMAS_TREE_CANDLE;XMAS_TREE_GARLAND;XMAS_TREE_TOPPING;SERVE_W2_ROOM;XMAS_WRAPPING_ID;XMAS_PRESENT_POSITION_ID;W2ROOM_OVERLAY;XMAS_PRESENT_UPDATE;UPDATE_W2_ROOM;PASSWORD_HASH;REASON;VERSION;MANUFACTURER;DEVICE;TIMESPAN;LONG_ID;SENDER;UPDATE_TIMESTAMP;LOGIN_FAIL_TYPE;UUID;OTP;USER_COUNT;FRIEND_COUNT;LATITUDE;LONGITUDE;GEO_POSITION;RESPECT_GEO_POSITION;CONNECT;CONFIGURATION;SEND_SPECIAL_CONFIGURATION;LOGIN;LAST_READ_TS;MAX_AMOUNT;REQUEST_CONVERSATIONS_SINCE;CLIENT_CONVERSATION_MESSAGE_COUNT;DONTMARKASREAD;REQUEST_MESSAGES_FOR_CONVERSATION_SINCE;REQUEST_PAST_MESSAGES_FOR_CONVERSATION_SINCE;REQUEST_CHANNEL_LISTS;CHANNEL_CATEGORY_SELECTION;CHANNEL_LIST_REQUEST_IDENTIFIER;REQUEST_CATEGORY_CHANNEL_LISTS;MAX_CHANNEL_COUNT;REQUEST_ALL_THEME_CHANNELS;THEME_CHANNEL_FILTER;REQUEST_THEME_CHANNELS;REQUEST_SUB_CHANNEL_LIST;REQUEST_CHANNEL_LIST_BY_NAME;CHANNEL_THEME_CATEGORY;CHANNEL_CATEGORY_HOLDER;CHANNEL_CATEGORY;MAY_DELIVER_PRIVATE;SEND_MESSAGE;REQUEST_PHOTO_MEET_CONTACTS;REQUEST_CONFIGURATION;CHECK_NICKNAME;REGISTER_FOR_ONLINE_STATUS_UPDATES;CLIENT_READ_MESSAGE;RATING;ANONYMOUS;FEEDBACK_TYPE;APP_FEEDBACK;PUSH_ID;UPDATE_ANDROID_PUSH_ID;REMOVE_ANDROID_PUSH_ID;IOS_PUSH_SERVER;IOS_PUSH_ID;REQUEST_PHOTO_OTP;SNAP_TYPE;REQUEST_SNAP_UPLOAD;IS_PREVIEW;REQUEST_SNAP_DOWNLOAD;SNAP_DOWNLOAD_NOT_AVAILABLE;SNAP_UPLOAD_ERROR;SNAP_STATUS;CHANGE_SNAP_STATUS;SNAPS_UPLOAD_ALLOWED;CHANGE_SNAP_UPLOAD_STATUS;UPLOAD_URL;SNAP_MAGIC_INFO_BYTE;SNAP_UPLOAD_INFORMATION;DOWNLOAD_URL;SNAP_DOWNLOAD_INFORMATION;CHAT_MESSAGE;KEEP_CONNECTION_OPEN;CHAT_LEAVE;CHAT_PING;ALLOW_SUB_CHANNEL;CHAT_JOIN;CHAT_JOIN_PASSWORD;FROM_CHANNEL;CHANNEL_PASSWORD;CHAT_CHANNEL_PASSWORD;CHAT_FORCE_LEAVE_CHANNEL;IS_HIDDEN_VISIT;REQUEST_PROFILE;PHOTO_MEET_CONTACT_ID;REQUEST_PROFILE_BY_PHOTO_MEET_CONTACT_ID;REQUEST_EDIT_PROFILE;REQUEST_CM_INFO;REMOVE_PHOTO_MEET_CONTACT;BULK_REMOVE_PHOTO_MEET_CONTACT;REMOVE;MANIPULATE_WATCHLIST;FRIENDLIST_ACTION;MANIPULATE_FRIENDLIST;UPDATE_ARCHIVE_INDEX;BULK_UPDATE_ARCHIVE_INDEX;UNARCHIVE;UPDATE_DELETE_INDEX;BULK_UPDATE_DELETE_INDEX;TIME_FOR_REGISTRATION;TRY_REGISTRATION;REQUEST_ALBUM_INFORMATION;REQUEST_INFORMATION;PHOTO_MEET_REQUEST_NEXT_VOTE;PHOTO_MEET_VOTE;PHOTO_MEET_VOTE_USER;SHOW_IN_PHOTO_MEET;SET_SHOW_IN_PHOTO_MEET;REQUEST_NUMBER_OF_CONTACTS;REQUEST_NUMBER_OF_IMAGES;PHOTO_MEET_IMAGE_SIZE;REQUEST_ADMINCALL_REASONS;ADMIN_CALL_REASON_ID;ADMIN_CALL;IGNORE_MODE;IGNORE_USER;RECEIPT_DATA;TRANSACTION_ID;MAYBE_IS_EXTENSION;NEW_APPSTORE_SUBSCRIPTION;PAYLOAD;SIGNATURE;NEW_PLAYSTORE_SUBSCRIPTION;NEW_PLAYSTORE_PURCHASE;NEW_FREE_SPOTLIGHT_ENTRY;REQUEST_SPOTLIGHT_FREE_STATUS;SPOTLIGHT_RANGE;SPOTLIGHT_IMAGE_SIZE;REQUEST_SPOTLIGHT_ENTRIES;FIND_SPOTLIGHT_ENTRY_BY_NICKNAME;FIRST_ELEMENT;LAST_ELEMENT;IMGURL;SPOTLIGHT_ENTRY;REQUEST_DAILY_REWARD;CONNECTED;USER_STATUS;ALIAS_NICKS;LOGIN_SUCCESS;LOGIN_FAILED;READ_MESSAGES;CONVERSATION;CONVERSATION_LIST;PHOTO_MEET_USERINFO;PHOTO_MEET_CONTACTS_LIST;CONVERSATION_MESSAGE;ARCHIVE_INDEX;DELETE_INDEX;ARCHIVE_TS;SNAPS_CONFIRMED;SHOW_SNAPS;PROFILE;PHOTO_MEET_PROFILE;UNREAD_MESSAGE;UNREAD_MESSAGE_INFORM;GOAL_NAME;TRACK_ANALYTICS_GOAL;CHANNEL_IN_CATEGORY;CHANNEL_LISTS;CHANNEL_LIST_THEME_CATEGORY;CHANNEL_LISTS_IN_THEME_CATEGORY;CHANNEL;CHANNEL_LISTS_NO_CATEGORY;CHANNEL_THEME_CATEGORY_DISPLAY_NAME;FALLBACK_ICON_URL;STANDARDFONTCOLOR;STANDARDBACKGROUNDCOLOR;PREVIEW_IMAGE_URL;CHANNEL_CATEGORY_ID;ONLINE_FRIENDS;SUB_CHANNELINFO;CHANNEL_METADATA;HAS_SUB_CHANNELS;USER_COUNT_IN_ALL_CHANNELS;NICKNAME_VALID;NICKNAME_INVALID;MESSAGE_ADD_SUCCESS;MESSAGE_ADD_ERROR;ONLINE_STATUS_CHANGED;SPECIALNICKS;CODEFORRED;CODEFORBLUE;STANDARDFONTSIZE;BREAKLINEFONTSIZE;IMGFLAGS;CHAT_CHANNELCONFIG;MAXMESSAGELENGTH;CHAT_ENTER;CHAT_DISCONNECT;CHAT_PUBLICMESSAGE;CHAT_PRIVATMESSAGE;CHAT_NICKLIST_USER;CHAT_MEMBERS;FONTSTYLE;COLOR;ICON;OLDCHANNEL;CHAT_COME;NEW_CHANNEL;CHAT_LEAVE_SERVER;CHAT_ACTION;URL;TOUCH_ONLY;SHOULD_POST;URL_REQUEST_DATA;OPEN_URL;CHAT_CHANGECHANNEL;CHAT_ADDICON;CHAT_DELICON;CHAT_FLEX_MESSAGE_TYPE;CHAT_FLEX_MESSAGE;CHAT_KICK;CHAT_MUTED;ONLY_VISIBLE_DUE_RIGHTS;PROFILE_ENTRY_TYPE;PROFILE_GROUP_TYPE;PROFILE_GROUP_ENTRY;PROFILE_ENTRY;CITY;ALBUM_COUNT;TOTAL_PHOTOS_IN_ALBUMS;PHOTO_VERIFIED;USER_PHOTO_DATA;HAS_BIRTHDAY;FRIEND_LISTS_STATUS;VIEWER_ADMINISTRATIVE_RIGHT;IS_ON_WATCHLIST;BIDI_FRIEND_STATUS;CHANNEL_MODERATOR_COMMENT;CM_INFO;CHANNEL_MODERATOR_COMMENT_TYPE;COMMENT;CM_NICK;EDIT_PROFILE_ENTRY_ITEM;EDIT_PROFILE_INFORMATION;EDIT_PROFILE_OPTION;SELECTED_INDEX;EDIT_PROFILE_ENTRY_TYPE;EDIT_PROFILE_ENTRY;ERROR_EDIT_PROFILE;IGNORED_BY_USER;PROBLEM_MANIPULATING_WATCHLIST;SUCCESS_MANIPULATING_WATCHLIST;SUCCESS_MANIPULATING_FRIENDLIST;PROBLEM_MANIPULATING_FRIENDLIST;CANCEL_BUTTON_TEXT;TITLEACTION;MOBILE_OPTION_ALERT;ACTION;PHOTO_OTP;PHOTO_URL_PREFIX;PHOTO_ALBUM;PHOTO_INFORMATION;PHOTO_ALBUM_NUMBER;PHOTO_ALBUM_COVER_NUMBER;PHOTO_INFO;PHOTO_URL;PHOTO_NUMBER;REGISTRATION_SUCCESS;REGISTRATION_NICKNAME_INFO;REGISTRATION_PASSWORD_INFO;REGISTRATION_EMAIL_INFO;REGISTRATION_GENDER_INFO;REGISTRATION_AGE_INFO;REGISTRATION_FAILED;REGISTRATION_NICKNAME_STATUS;REGISTRATION_NICKNAME_SUGGESTION;REGISTRATION_PASSWORD_STATUS;REGISTRATION_EMAIL_STATUS;REGISTRATION_GENDER_STATUS;REGISTRATION_AGE_STATUS;PHOTO_MEET_STOP_REASON;PHOTO_MEET_PAYMENT_STATUS;PHOTO_MEET_CONTACTS;PREFETCH_IMAGES;PHOTO_MEET_AD_MESSAGE;PHOTO_MEET_ALERT_REASON;PHOTO_MEET_NEXT_VOTING;PHOTO_MEET_CONTACT;NICKNAME_IF_HAS_PAID;POSITIVE_VOTED;PHOTO_MEET_AD_TYPE;PHOTO_MEET_AD_TEXT;HAS_PAID;PHOTO_MEET_WANTS_TO_MEET_YOU;PHOTO_MEET_INFORMATION;PHOTO_MEET_IS_NEW_PREMIUM;PHOTO_MEET_NEW_PREMIUM;PHOTO_MEET_REQUEST_PACKAGE_PAYMENT;ADMIN_CALL_REASON;ADMIN_CALL_REASONS;ADMIN_CALL_REASON_NAME;SUCCESS;ADMIN_CALL_ANSWER;GENERIC_MESSAGE_PREFERRED_DISPLAY_TYPE;GENERIC_MESSAGE_CONTEXT;GENERIC_MESSAGE;USER_IS_IGNORED;USER_IGNORED_RESULT;IS_IGNORED;IOS_PAYMENT_FINISH_TRANSACTION;IOS_PAYMENT_ASK_FOR_RECEIVER;FOTOMEET_SUBSCRIPTION_SUCCESS;SEND_SPOTLIGHT_ENTRIES;SPOTLIGHT_ENTRY_PAYMENT_SUCCESS;FAIL_REASON;SPOTLIGHT_ENTRY_PAYMENT_FAILED;SPOTLIGHT_ENTRY_FREE_SUCCESS;SPOTLIGHT_ENTRY_FREE_FAILED;SPOTLIGHT_POINTS_COLLECTED;SPOTLIGHT_POINTS_REQUIRED;SPOTLIGHT_FREE_STATUS;SPOTLIGHT_ENTRY_POSITION;SEND_SPOTLIGHT_ENTRY_POSITION;PREVIOUS_SPOTLIGHT_POINTS;CURRENT_SPOTLIGHT_POINTS;SPOTLIGHT_POINTS_CHANGED;SKUID;CONSUME_PLAYSTORE_PAYMENT;DISCONNECT;PING;PAYMENT_URL;TARGET;WEB_PAYMENT_URL;SEND_TEXT;SHOW_CHANNEL_SELECTION;WS1;WS2;WS3;WS_VALUES;DOUBLEVALUE;WS_KILL;;5;;20;;;9;;23;;13;;13;;13;;13;;13;;13;;13;;13;;4;;4;;4;;4;;2;;2;;2;;37;38;39;;2;;4;;4;;4;;3;;13;;5;;3;;2;;2;;1;;1;;1;;3;;40;;41;;55;56;25;;11;60;12;;58;;61;62;;13;;13;;3;;3;;3;;4;;4;;33;66;44;63;64;65;67;;40;;40;;40;;40;;40;;71;72;73;;1;;13;;3;;3;;3;;5;;5;;33;66;32;78;79;75;76;77;67;80;81;;5;;4;;5;;5;;4;;13;;4;;83;84;85;86;87;88;89;;33;32;67;;3;;13;;28;92;93;58;;13;;95;;95;;11;95;12;;13;;99;34;;13;;13;;95;101;53;102;;95;101;53;102;;25;29;108;109;;105;110;111;112;;28;11;105;12;11;106;12;;0;;13;;4;;4;;4;;31;11;29;12;;1;;28;11;113;12;114;;28;;13;;4;;4;;4;;4;;25;132;;4;;13;;1;;13;;4;;13;;1;;1;;28;117;32;34;118;119;105;120;121;11;122;12;123;11;124;12;125;126;127;128;129;130;;4;;28;117;122;124;128;;28;117;124;128;;28;117;128;;28;117;;28;117;;28;117;34;;40;;147;148;149;150;151;;69;70;157;158;159;160;161;;69;139;74;;70;162;;28;117;139;140;141;142;143;;4;;28;117;145;;29;;152;;152;;152;;152;;153;154;155;156;;40;;40;;40;;40;;40;;40;;29;;1;;3;;74;;32;74;165;;28;11;163;12;;3;;165;;74;;74;;74;;28;167;168;169;;13;;117;28;171;;117;28;;178;179;180;11;181;12;11;182;12;11;183;12;184;185;186;11;187;12;;0;;3;;174;175;176;;2;;2;;0;;0;;13;;0;;0;;0;;0;;0;;;;3;;190;176;;174;;31;;2;;180;;1;;1;;28;193;194;195;196;197;174;;31;205;180;206;207;208;209;11;182;12;29;210;211;;4;;4;;1;;11;199;12;200;201;202;;11;199;12;;2;;28;;1;;4;;2;;1;;1;;31;210;;11;212;12;;11;199;12;;11;31;12;;214;215;;11;182;12;;13;;31;218;211;;222;223;;28;117;99;11;220;12;;13;;13;;13;;13;;13;;28;224;225;226;;11;29;12;;11;30;12;;28;11;31;12;;58;;5;;2;;0;;4;;2;;4;;237;25;;3;;0;;232;233;11;239;12;11;234;12;240;;1;;236;11;234;12;242;;13;;235;239;234;;232;11;245;12;11;238;12;;4;;232;244;247;;117;28;241;11;243;12;11;244;12;;117;28;11;246;12;11;243;12;11;238;12;11;248;12;;25;;25;;25;;117;28;232;240;251;252;253;;13;;28;117;255;;4;;13;;13;;2;;4;;34;;34;;4;;4;;2;;13;;3;;257;258;259;260;29;27;139;261;262;263;264;265;266;267;268;;273;25;41;52;;274;;11;270;12;11;271;12;;2;;273;276;27;41;52;11;257;12;25;277;275;;11;274;12;;0;;11;278;12;11;279;12;11;280;12;;13;;13;;13;;1;;117;274;281;53;;29;;25;;29;;13;;57;;283;284;272;285;286;287;;117;287;;117;11;269;12;;57;;11;257;12;;11;257;12;;117;288;291;292;293;;117;288;;117;288;;57;;1;;117;288;297;298;;117;;117;25;11;268;12;273;26;;117;273;;;257;;273;;11;257;12;;310;57;43;;42;307;;28;31;307;;311;161;312;;3;;13;;42;;40;;28;31;307;314;;31;307;;28;11;316;12;;321;44;;322;62;;11;318;12;11;319;12;;0;;0;;11;318;12;11;319;12;;31;28;42;43;;54;;54;;11;325;12;11;326;12;;335;336;337;338;339;340;11;341;12;;51;354;355;356;357;358;;1;;31;328;329;330;;4;;31;332;328;329;330;;31;;11;342;12;;11;57;12;;11;57;12;;46;;11;57;12;;11;57;12;;29;343;11;60;12;;46;344;345;;0;;46;;13;;1;;0;;3;;13;;1;;1;;13;;31;346;338;329;332;347;348;349;350;351;330;352;;4;;4;;4;;4;;4;;31;;11;28;12;;28;31;25;360;;28;31;;28;;53;58;;44;;13;;366;;11;45;12;;45;25;;11;369;12;;13;;1;;371;372;;13;;222;374;27;;46;;393;;13;;376;377;378;;46;62;;46;378;11;380;12;;3;;378;382;380;;378;382;11;380;12;;4;;4;;13;;385;386;387;;385;386;11;387;12;;57;;46;29;25;11;394;12;;390;376;377;378;11;391;12;;13;;46;395;396;397;11;398;12;11;399;12;59;27;400;;403;404;;401;402;;0;;13;;0;;41;;3;;3;;3;;3;;1;;46;405;;13;;407;;3;;13;;13;;13;;409;410;411;412;;13;;414;;;393;145;;57;;57;;57;;46;32;418;419;420;;3;;42;46;422;348;;31;;31;;1;;28;424;425;426;;28;;13;;1;;1;;2;;1;;1;;117;11;429;12;430;431;432;433;434;;29;450;449;451;452;;453;454;455;456;;13;;117;429;11;436;12;11;437;12;438;;5;;11;446;12;;11;447;12;;429;440;441;442;;1;;429;444;;448;449;;448;436;;4;;13;;2;;13;;1;;3;;13;;13;;5;;117;449;25;;117;449;452;;117;429;;3;;4;;5;;6;;35;36;460;461;46;462;463;;4;;11;68;12;11;82;12;11;90;12;11;91;12;465;;13;;46;23;11;25;12;11;467;12;;;429;;429;11;449;12;;429;440;;449;;13;;11;449;12;474;;27;479;;1;;117;11;476;12;477;;4;;28;425;426;;28;;117;28;25;;13;;13;;11;483;12;11;484;12;;11;483;12;;3;;4;;3;;28;34;487;488;489;;4;;28;11;491;12;;28;;1;;1;;1;;117;494;495;25;26;496;;28;25;;13;;28;499;59;;31;;11;31;12;;31;;31;;1;;117;31;205;180;29;505;210;;117;11;31;12;11;210;12;;;31;205;180;29;208;511;;117;11;509;12;;1;;11;220;12;;13;;513;;45;451;519;520;29;455;521;522;523;524;525;526;479;527;;45;522;495;479;;45;522;495;11;528;12;;47;11;515;12;11;516;12;11;517;12;;13;;13;;2;;4;;4;;3;;2;;4;;4;;0;;45;520;;11;529;12;;45;522;523;525;526;479;527;;47;11;531;12;;44;;2;;534;451;11;45;12;;202;11;516;12;11;517;12;;11;45;12;;5;;1;;538;45;539;;273;25;;11;45;12;;47;;;11;45;12;;28;34;29;488;;1;;28;547;488;;28;;5;;28;550;494;31;;550;;28;550;405;;555;78;79;451;557;558;559;;2;;117;11;554;12;555;;13;;1;;1;;2;;2;;2;;13;;13;;13;;13;;13;;2;;117;560;561;54;562;563;564;565;11;566;12;567;568;;3;;4;;117;570;571;;117;25;;561;;;42;25;;398;27;235;;27;25;398;;28;11;578;12;;28;578;;28;578;;13;;13;;13;;31;582;583;584;;31;582;583;;13;;3;;0;;597;596;;28;;5;;1;;13;;587;180;588;205;589;590;591;592;593;594;;47;;0;;1;;587;588;598;;;11;595;12;;4;;602;;4;;1;;11;595;12;604;605;;1;;610;602;;607;608;;1;;45;29;402;622;623;624;;11;395;12;;45;29;;45;29;;45;29;;45;29;;45;29;;45;29;625;;50;29;;50;29;;117;11;611;12;612;11;613;12;11;614;12;11;615;12;11;616;12;11;617;12;11;618;12;11;619;12;11;620;12;;11;395;12;;11;395;12;;11;395;12;;0;;2;;2;;45;587;636;;0;;45;48;49;;45;48;49;;45;48;49;;45;48;;45;;117;587;626;627;11;628;12;629;11;48;12;11;630;12;11;631;12;11;632;12;11;633;12;634;53;;3;;3;;117;587;25;;628;637;;117;587;11;45;12;11;639;12;48;49;;13;;13;;13;;13;;13;;5;;5;;587;;1;;0;;13;;13;;3;;3;;7;;7;;655;656;;1;;643;644;645;651;;11;220;12;;660;;587;641;;47;;4;;47;663;664;;4;;1;;587;47;666;664;667;;587;47;664;;657;658;;11;681;12;;4;;657;658;671;672;;4;;674;672;;680;674;;11;676;12;672;;28;672;;28;672;;0;;682;;0;;1;;11;587;12;25;683;;;;587;;11;587;12;;647;11;587;12;;2;;1;;0;;690;25;691;692;;13;;694;;694;;0;;697;694;;;0;;11;587;12;700;;1;;647;702;;647;25;;25;;0;;11;587;12;706;;1;;11;587;12;708;;13;;2;;710;11;711;12;;13;;713;647;11;711;12;702;;28;25;;1;;28;716;;25;;1;;28;719;;28;;28;;13;;28;722;723;;28;25;;1;;587;726;;4;;728;;;587;;587;;11;732;12;;1;;587;734;;0;;587;736;;647;740;;11;738;12;;1;;647;;11;741;12;;646;;587;641;583;180;205;743;;587;;752;753;754;;746;;0;;728;748;746;;1;;750;;4;;4;;0;;;13;;756;587;25;;0;;587;758;;13;;13;;1;;760;587;761;762;;13;;13;;764;765;;764;765;;;;774;775;;0;;770;771;;770;587;;4;;4;;13;;587;205;180;776;590;;;;3;;11;587;12;;587;180;205;780;781;;642;650;;11;647;12;;649;11;595;12;11;789;12;790;791;792;708;793;794;;11;785;12;784;;595;208;;11;787;12;;647;25;47;648;;5;;5;;5;;1;;1;;595;866;862;208;867;594;11;861;12;11;860;12;868;869;;795;728;;587;47;25;;587;47;;13;;799;;682;11;805;12;;11;801;12;672;;680;807;808;11;805;12;;11;803;12;672;;28;815;;11;805;12;672;;13;;13;;13;;13;;13;;4;;11;587;12;;816;817;;653;654;809;810;811;11;812;12;813;814;;1;;4;;595;;587;;587;;587;642;;595;;11;587;12;;13;;13;;4;;4;;4;;28;809;810;824;825;826;827;776;828;;4;;587;829;830;;;648;28;25;;648;11;587;12;28;25;722;;595;837;838;11;839;12;;28;11;835;12;;13;;13;;13;;13;;28;835;840;;13;;587;28;842;;587;28;25;;13;;1;;1;;11;220;12;;845;846;847;848;;840;829;;28;587;839;;28;587;839;;0;;32;25;853;;;;1;;0;;0;;859;27;11;223;12;808;857;;858;27;223;808;857;;13;;4;;4;;1;;865;863;864;;1;;870;871;;0;;1;;0;;874;875;47;876;28;;587;11;872;12;;0;;13;;587;;858;27;11;879;12;880;881;;11;877;12;;220;;4;;0;;877;;25;;587;;25;;25;;736;25;;736;25;;13;;32;892;;32;25;889;11;890;12;;13;;652;;13;;897;898;11;899;12;;587;894;11;895;12;;3;;901;;900;901;;13;;3;;782;;909;11;910;12;;911;;912;;913;;914;;903;904;905;906;907;;0;;587;;0;;0;;0;;0;;0;;927;;11;922;12;;11;776;12;;925;926;;0;;915;916;917;918;919;920;;728;923;180;205;776;208;864;865;924;;587;;1;;13;;13;;1;;4;;928;;1;;930;;;935;756;;11;933;12;;13;;1;;936;25;;0;;0;;938;939;25;11;220;12;;587;943;;941;940;;1;;587;761;;761;;587;761;;770;771;11;777;12;;587;;13;;587;949;;587;;587;;4;;4;;953;954;;4;;587;956;;4;;4;;958;959;;13;;587;961;;642;;;13;;13;;965;966;;46;25;;28;25;;11;974;12;27;;11;974;12;27;;11;974;12;27;;28;970;971;972;;7;;28;;:RIGHT;LEFT;;MATCHING;DISTANCE;AGE;SINGLESTATUS;;UNKNOWN;FEMALE;MALE;;TALKING;FRIENDSHIP;FLIRT;MEETING;MARIAGE;EROTIC_TALKING;;ONLY_WITH_FOTO;PREFER_SINGLES;;NORMAL;PREFERRED;NEVER;;NORMAL;PREFERRED;NEVER;;HETERO;HOMO;BI;;THEY_ARE_LONGTERM_MEMBERS;THEY_MATCH_MY_SEARCH_CRITERIA;ONLY_WHILE_I_AM_IN_SEARCH_CHANNEL;NEVER;OFTEN;;ANY_STATE;NOT_SELECTED;SELECTED;DEAD;GLOWING;;ACTIVE;INACTIVE;BINGO;NO_BINGO_POSSIBLE;JACKPOT;GAME_END;;LEFT;RIGHT;;instantWhoisCornerRadius;instantWhoisMillisToRequest;instantWhoisMillisToRequestNickList;instantWhoisMillisToRequestW2;instantWhoisMillisToShow;instantWhoisMillisToHide;instantWhoisMillisToUpdateVisibleRequest;w2WindowWidth;w2WindowHeight;hiBoxWidth;hiBoxBasicHeight;hiBoxLineHeight;hiBoxLineSepHeight;hiBoxDistanceTop;hiBoxDistanceBottom;hiBoxDistanceRight;currentSeason;w2MapWToW2;publicMsgInPP;soundInPP;standAloneSBox;logoutButtonActive;globalSound;;noKeys;hiBoxBasicContent;hiBoxLineEndText;hiBoxLineSeperatorText;hiBoxBackgroundImageID;w2DefaultTab;imgProxyList;serverId;logoutButtonLogoutURL;logoutButtonFotologoutURL;;FULL;STRETCHED;TILED;;regularTarget;noTarget;newTargetRequested;;TextField;TextPanel;TextArea;Image;Button;CheckBox;ComboBoxSelect;ComboBoxInput;Slider;EMPTY;ComplexGroupInput;ColorBox;ImageBox;TextToolbar;;ShowBulletPoint;TextAlignRight;TextAlignLeft;TextBold;TextItalic;PasswordInput;LabelLocationTop;LabelLocationLeft;LabelLocationRight;LabelLoactionBottom;LabelLocationCenter;LabelBold;LabelItalic;ButtonActionDispose;ButtonActionSubmit;UseImages;AlternativeDisplayMode;ComboBoxFreeInput;ImageHasBorder;DisableHighlightOnInputFocus;Disabled;ScrollingDisabled;SendbackText;NoAdd;;SMILEY;KNUDDEL;;UNKNOWN;FRIENDLIST;WATCHLIST;TUTANTS;FOTOMEET;;OFFLINE;MOBILE;ONLINE;;SMALL;MEDIUM;LARGE;;NONE;LEFT;RIGHT;BOTH;;UNKNOWN;USER_UNKNOWN;TEMPORARY_ERROR;WRONG_PASSWORD;INSUFFICIENT_RIGHTS;ALREADY_LOGGED_IN;LOCKED_TEMPORARY;LOCKED_PERMANENT;BANNED;DEACTIVATED;USER_IS_BOT;;FLIRT;OVER20;UNDER18;LOKALRUNDE;GAMES;SPORT;MUSIC;THEMETALK;MYCHANNELS;;FAVORITES;NEARBY;RECOMMENDED;FRIENDS;LAST_VISITED;PERSONAL;;BUGREPORT;IMPROVEMENT;;KnuddelsDevelopment;KnuddelsProduction;BetaDevelopment;BetaProduction;;FOTO;SNAP1;SNAP2;SNAP3;SNAP4;SNAP5;SNAP6;SNAP7;SNAP8;SNAP9;SNAP10;;YES;NO;;ADD;ACCEPT;REMOVE;CANCEL;;NO;MAYBE;YES;;BIG;VERY_BIG;;TOGGLE;SET_IGNORED;SET_UNIGNORED;;SMALL;LARGE;;UNKNOWN;LOGIN_FAILED;CHANNEL_PASSWORD_NEEDED;LEAVE_CHANNEL;OLD_FLEXFRAME;;REALNAME;RELATIONSHIP;SEXUAL_ORIENTATION;SMOKER;CHILDREN;BIRTHDAY;ZODIAC;AT_KNUDDELS;KISSES;KNUDDEL;ONLINE_TIME;STATUS;README;CITY;PLZ;HOMELAND;;I_LOVE;HOBBY;MUSIC;MOVIE;SERIES;BOOK;;NO_RIGHT;CM_RIGHT;;NOT_A_FRIEND;PENDING_IN;PENDING_OUT;IS_FRIEND;IS_BEST_FRIEND;IS_PARTNER;;UNKNOWN;POSITIVE;NEGATIVE;;FREE_TEXT;MULTIPLE_CHOICE;;STATUS_OK;NICK_EXISTS;NICK_INVALID;NICK_FILTERED;NICK_INVALID_FIRSTCHAR;NICK_TOOMUCH_CAPITALS;NICK_TOO_LONG;NICK_FORBIDDEN_CHARS;;STATUS_OK;PW_INVALID;PW_TOO_LONG;PW_TOO_SHORT;;STATUS_OK;EMAIL_INVALID;EMAIL_BLOCKED;EMAIL_TOO_LONG;;STATUS_OK;GENDER_UNKNOWN;;STATUS_OK;AGE_TOO_LOW;AGE_TOO_HIGH;AGE_NO_NUMBER;;DONT_STOP;LIMIT_REACHED;NO_MATCHES;NO_PHOTO;;NO_ALERT;NOT_SHOWN;;DIALOG;TOAST;;MESSAGE;UPDATE;IGNORE;;;";
        
        
	static {
		instance = new Server();
		
                moduleTree = new ModuleTree(moduletree);
        }
	public Server() {
		clients = new HashMap<String, Client>();
		onlineUsers = new ArrayList<String>();
		werbung = new HashMap<Integer,String>();
		news = new ArrayList<String[]>();
		actions = new HashMap<Long, String[]>();
		snp = new HashMap<Long, String[]>();
		help = new HashMap<String, String[]>();
                mix = new ArrayList<String>();
		statistik = new HashMap<String, String[]>();
                quiz = new HashMap<String, String>();
                settings = new HashMap<String, String>();
                butlertips = new ArrayList<String>();
                quiz_classic = new HashMap<String, String>();
                quiz_mathe = new HashMap<String, String>();
                quiz_translate = new HashMap<String, String>();
                defaultmessages = new HashMap<String, String[]>();
                translate = new HashMap<String, String>();
                mathe = new HashMap<String, String>();
		elections = new HashMap<String, String[]>();		
		tutorials = new HashMap<Integer, String[]>();		
		lotto = new HashMap<String, String[]>();
		umfragen = new HashMap<String, String>();
		sexy = new ArrayList<String>();
                cool = new ArrayList<String>();
                
                smileys = new HashMap<String, Smiley>();
                smileys2 = new HashMap<String, Smiley>();
                tauschen = new HashMap<String, String[]>();
               leihen = new HashMap<String,String[]>();
                kategorie = new HashMap<String, Kategorie>();
                fav = new HashMap<String,Favs>();
                gratis = new HashMap<String,Gratis>();                
                verliehen = new HashMap<String, Verliehen>();
                usersmileys = new HashMap<String, Usersmiley>();
                codes = new HashMap<String, Codes>();
                feature = new HashMap<String, Feature>();
		wordmix = new ArrayList<String>();
		lockedNicks = new HashMap<String, String>();
		plz = new HashMap<String, String[]>();
		invite = new HashMap<Integer, String[]>();
		todo = new HashMap<String, String>();
		syslog = new HashMap<String, String[]>();
		permissions = new HashMap<String, String>();
		luftlinie = new HashMap<String, Integer>();
		toplisten = new HashMap<String, String[]>();
		james = new HashMap<String, String>();
		functions = new HashMap<String, String[]>();
		macros = new HashMap<String, String>();
		badwords = new HashMap<String, Integer>();
		butler = new Client(null);
		channels = new LinkedHashMap<String, Channel>();
		logins = new ArrayList<String>();
	}

	public static Server get() {
		return instance;
	}

	public long getUpdate() {
		return update;
	}
	
	public void setUpdate(long update) {
		this.update = update;
	}
	
	public int getLottoJackpot() {
		return lottoJackpot;
	}
        public String getSettings(String option) {
           return Server.settings.get(option);
         }
        public void setSettings(String option,String value) {
            Server.settings.put(option, value);
          Server.get().query("update globalsettings set `value`='"+value+"' where `option`='"+option+"'");
          
       }

	public void increaseLottoJackpot(int lottoJackpot) {
		this.lottoJackpot += lottoJackpot;
	}

	public void setLottoJackpot(int lottoJackpot) {
		this.lottoJackpot = lottoJackpot;
	}

	public int getAllKnuddels() {
		return allKnuddels;
	}

	public void increaseAllKnuddels(float knuddels) {
		this.allKnuddels += knuddels;
	}

	public ModuleTree getModuleTree() {
		return moduleTree;
	}
        
  

	public void setAllKnuddels(int allKnuddels) {
		this.allKnuddels = allKnuddels;
	}

	public void deseaseAllKnuddels(int allKnuddels) {
		this.allKnuddels -= allKnuddels;
	}

	public int getAllKontoKnuddels() {
		return allKontoKnuddels;
	}

	public void increaseAllKontoKnuddels(int allKontoKnuddels) {
		this.allKontoKnuddels += allKontoKnuddels;
	}

	public void setAllKontoKnuddels(int allKontoKnuddels) {
		this.allKontoKnuddels = allKontoKnuddels;
	}

	public void deseaseAllKontoKnuddels(int allKontoKnuddels) {
		this.allKontoKnuddels -= allKontoKnuddels;
	}

	public Client getButler() {
		return butler;
	}

	public void setButler(Client butler) {
		this.butler = butler;
	}

	public Client getNRS() {
		return getClient("Notruf-System");
	}

	public void addIP(String ip) {
		logins.add(ip);
	}

	public boolean checkIP(String ip) {
		int count = 0;

		for (String s : logins) {
			if (s.equals(ip)) {
				count++;
			}
		}

		return count > 7;
	}

        public boolean checkEmail(String email) {
		int count = 0;

		for (String s : logins) {
			if (s.equals(email)) {
				count++;
			}
		}

		return count > 7;
	}
        
        
         public void addDevLog(String type, String data) {
            this.query("INSERT INTO `dev_log` (`id`, `type`, `data`) VALUES (NULL, '" + type + "', '" + data + "')");
        }
        
	public void clearIPs() {
		logins.clear();
	}

	public Client getClient(String target) {
		synchronized (clients) {
			return clients.get(target.toLowerCase());
		}
	}

	public Collection<Client> getClients() {
		synchronized (clients) {
			return clients.values();
		}
	}

	public static int countChars(String input, char toCount) {
		int counter = 0;

		for (char c : input.toCharArray()) {
			if (c != toCount)
				continue;
			counter++;
		}

		return counter;
	}

	public void addClient(Client client) {
		synchronized (clients) {
			clients.put(client.getName().toLowerCase(), client);
		}
	}

	public void removeClient(String name) {
		synchronized (clients) {
			clients.remove(name.toLowerCase());
		}
	}

	public Channel getChannel(String name) {
		return channels.get(name.toLowerCase());
	}

             
	public Collection<Channel> getChannels() {
		return channels.values();
	}

	public static void removeChannel(String name) {
		synchronized (channels) {
			channels.remove(name.toLowerCase());
		}
	}

	public void createChannel(String name, int temp, String owner,
			int butlerexist, String design, String topic) {
		Random random = new Random();
		int randomInt = random.nextInt(5);

		String styleimage = "";
		String styleid = "";
		String pos = "0";

		if (design == null) {
			if (randomInt == 0) {
				styleimage = "-";
				styleid = "1";
				pos = "0";
			} else if (randomInt == 1) {
				styleimage = "style31.gif";
				styleid = "2";
				pos = "17";
			} else if (randomInt == 2) {
				styleimage = "style32.gif";
				styleid = "3";
				pos = "20";
			} else if (randomInt == 3) {
				styleimage = "style33.jpg";
				styleid = "4";
				pos = "17";
			} else {
				styleimage = "style34.gif";
				styleid = "5";
				pos = "17";
			}
		} else {
			if (design.equals("Blumentapete")) {
				styleimage = "style31.gif";
				styleid = "2";
				pos = "17";
			} else if (design.equals("Blaue Wolken")) {
				styleimage = "style34.gif";
				styleid = "5";
				pos = "17";
			} else if (design.equals("Kerze")) {
				styleimage = "style41.gif";
				styleid = "8";
				pos = "20";
			} else if (design.equals("Hansi und eine Handvoll Herzen")) {
				styleimage = "style35.gif";
				styleid = "9";
				pos = "17";
			} else if (design.equals("Pferde auf grün")) {
				styleimage = "style36.gif";
				styleid = "10";
				pos = "17";
			} else if (design.equals("Sterne")) {
				styleimage = "style37.gif";
				styleid = "11";
				pos = "17";
			} else if (design.equals("Erdbeeren")) {
				styleimage = "style38.gif";
				styleid = "12";
				pos = "17";
			} else if (design.equals("Kirschen")) {
				styleimage = "style39.gif";
				styleid = "13";
				pos = "17";
			} else if (design.equals("Stifte Radierer und Knöpfe")) {
				styleimage = "style40.gif";
				styleid = "14";
				pos = "17";
			}
		}

		Server.get()
				.query(String
						.format("INSERT INTO channels set name='%s', cls='',cmutes='',mutes='',tochter='',hz='',size='25', backgroundImage='%s', backgroundPosition='%s', style='%s', info='%s', temp='%s', owner='%s', password='%s', bannedFunctions='%s', visible='%s', cms='%s', mcms='', category='0', holnick=''",
								name,
								String.format("pics/channels/%s", styleimage),
								pos, styleid, "", temp, owner, "", "", 0, ""));

		PoolConnection pcon = ConnectionPool.getConnection();
		PreparedStatement ps = null;

		try {
			Connection con = pcon.connect();
			ps = con.prepareStatement("SELECT * FROM channels where name='"
					+ name + "'");
			ResultSet rs = ps.executeQuery();

			while (rs.next()) {
				Map<Integer, ChannelStyle> channelStyles = new HashMap<Integer, ChannelStyle>();

				PoolConnection pcon2 = ConnectionPool.getConnection();
				PreparedStatement ps2 = null;

				try {
					Connection con2 = pcon2.connect();
					ps2 = con2.prepareStatement("SELECT * FROM channelstyles");
					ResultSet rs2 = ps2.executeQuery();

					while (rs2.next()) {
						channelStyles.put(rs2.getInt("id"), new ChannelStyle(
								rs2));
					}
				} catch (SQLException e) {
					e.printStackTrace();
				} finally {
					if (ps2 != null) {
						try {
							ps2.close();
						} catch (SQLException e) {
						}
					}

					pcon2.close();
				}

				Channel channel2 = new Channel(rs, channelStyles.get(rs
						.getInt("style")));

				if (butlerexist == 1) {
					butler.joinChannel(channel2);
					channel2.addClient(butler);
				}

				channels.put(rs.getString("name").toLowerCase(), channel2);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (ps != null) {
				try {
					ps.close();
				} catch (SQLException e) {
				}
			}

			pcon.close();
		}
	}

	public boolean checkCodeActivated(String code) {
		return Settings.getCodes().contains(String.format("|%s~", code));
	}

        
            public static String getSortFriendsoffline(String sm) {
        
            // %~~%TEXT|~~|~~|TIME%~~%
            Map<String, Integer> inputMap = new HashMap<String, Integer>();
  for(String smid : sm.split("%~~%")) {
            if (!smid.isEmpty()) {  
     String[] xx = smid.split("\\|~~\\|~~\\|");                
       inputMap.put(xx[0],Integer.parseInt(xx[1]));
       }} 
            
  SortedMapUtils.createMapSortedByValuesAndKeys(inputMap);
    Comparator<Integer> customComparator = 
    Collections.reverseOrder(SortedMapUtils.<Integer>comparableComparator());
     Map<String, Integer> customSorted =  SortedMapUtils.createMapSortedByValuesAndKeys(inputMap,customComparator,SortedMapUtils.<String>comparableComparator());    
  String aus = "";
 
          for (Object key : customSorted.keySet())
        {
       aus = key.toString()+aus;   
            
        }
    
        
          return aus;
  
  
        }
            
          public String getSortSmileyvisitbyKategorie(String sm) {
        
            // %%"+sm.getID()+"|1|"+id+"%%
            Map<String, Integer> inputMap = new HashMap<String, Integer>();
  for(String smid : sm.split("%%")) {
            if (!smid.isEmpty()) {  
       Usersmiley sss = Server.get().getUsersmiley(smid);
       Smiley sms = Server.get().getSmiley(String.valueOf(sss.getSMID()));
       int id;
       if (Server.get().getKategorie(sms.getKategorie()) == null) {
           id = 999999;
       } else {
           id = Server.get().getKategorie(sms.getKategorie()).getID();
       }
       inputMap.put(smid,id);
       }} 
            
  SortedMapUtils.createMapSortedByValuesAndKeys(inputMap);
    Comparator<Integer> customComparator = 
    Collections.reverseOrder(SortedMapUtils.<Integer>comparableComparator());
     Map<String, Integer> customSorted =  SortedMapUtils.createMapSortedByValuesAndKeys(inputMap,customComparator,SortedMapUtils.<String>comparableComparator());    
  String aus = "";
 
          for (Object key : customSorted.keySet())
        {
       aus = key.toString()+"%%"+aus;   
            
        }
    
        
          return aus;
  
  
        }
      public String getSortSmileys() {
        List<String> namen = new ArrayList<String>();
            for(Smiley sm : Server.get().getSmileys()) {
                namen.add(String.valueOf(sm.getName2()));
               
            }
            
            Collections.sort(namen);
            //   Collections.reverse(namen); für absteigend
          String aus = "";
            for(String v : namen) {
            aus += "|"+v+"|";    
            }
           return aus;   
          
      }
      
         public String getSortKategorie() {
        List<String> namen = new ArrayList<String>();
            for(Kategorie ka : Server.get().getKategorien()) {
                namen.add(String.valueOf(ka.getName()));
            }
            Collections.sort(namen);
            //   Collections.reverse(namen); für absteigend
          String aus = "";
            for(String v : namen) {
            aus += "|"+v+"|";    
            }
           return aus;   
          
      }
         
     public String getSortFeatures() {
            List<String> namen = new ArrayList<String>();
            for(Feature ft : Server.get().getFeatures()) {
                namen.add(ft.getName());
            }
            Collections.sort(namen);
            //   Collections.reverse(namen); für absteigend
          String aus = "";
            for(String v : namen) {
            aus += "|"+v+"|";    
            }
           return aus; 
        }
     
        public String getSortSmileyoverviewbyKategorie(String sm) {
            // %%"+sm.getID()+"|1|"+id+"%%
            Map<String, Integer> inputMap = new HashMap<String, Integer>();
  for(String smid : sm.split("%%")) {
            if (!smid.isEmpty()) {             
       Smiley sms = Server.get().getSmiley(smid.split("\\|")[0]);
       int id;
       if (Server.get().getKategorie(sms.getKategorie()) == null) {
           id = 999999;
       } else {
           id = Server.get().getKategorie(sms.getKategorie()).getID();
       }
       inputMap.put(smid,id);
       }} 
            
  SortedMapUtils.createMapSortedByValuesAndKeys(inputMap);
    Comparator<Integer> customComparator = 
    Collections.reverseOrder(SortedMapUtils.<Integer>comparableComparator());
     Map<String, Integer> customSorted =  SortedMapUtils.createMapSortedByValuesAndKeys(inputMap,customComparator,SortedMapUtils.<String>comparableComparator());    
  String aus = "";
 
          for (Object key : customSorted.keySet())
        {
       aus = "%%"+key.toString()+"%%"+aus;   
            
        }
    
          return aus;
  
  
        }
  public String getSortSmileylistbySeltenheit(String sm) {
         Map<String, Integer> inputMap = new HashMap<String, Integer>();
  for(String smid : sm.split(",")) {
            if (!smid.isEmpty()) {             
           Smiley sms = Server.get().getSmiley(smid);
           if (sms != null) {
       inputMap.put(String.valueOf(sms.getID()),sms.getSelten());
       }}}
      SortedMapUtils.createMapSortedByValuesAndKeys(inputMap);
    Comparator<Integer> customComparator = 
    Collections.reverseOrder(SortedMapUtils.<Integer>comparableComparator());
     Map<String, Integer> customSorted =  SortedMapUtils.createMapSortedByValuesAndKeys(inputMap,customComparator,SortedMapUtils.<String>comparableComparator());    
  String aus = "";
  String sort = "";
          for (Object key : customSorted.keySet())
        {
       aus = "|"+key.toString()+"|"+aus;   
            
        }
          for(String d : aus.split("\\|")) {
                  if (!d.isEmpty()) {
                      if (!sort.isEmpty()) {
                          sort += ",";
                      }
                      sort += d;
                  }
                  }
        
          return sort;
  } 
         
    
        
    
       
      
        public static String replaceLast(String string, String toReplace, String replacement) {
    int pos = string.lastIndexOf(toReplace);
    if (pos > -1) {
        return string.substring(0, pos)
             + replacement
             + string.substring(pos + toReplace.length(), string.length());
    } else {
        return string;
    }
}
	
        
         public Gratis getGratis(String id) {
		synchronized (gratis) {
			return gratis.get(id);
		}
	}
         
         public Smiley getSmiley(String id) {
		synchronized (smileys) {
			return smileys.get(id);
		}
	}
           public Smiley getSmiley2(String name) {
		synchronized (smileys2) {
			return smileys2.get(name);
		}
	}
         
          public Favs getFav(String v) {
		synchronized (fav) {
			return fav.get(v);
		}
	}
         
          
         public String[] getTausch(String id) {
		synchronized (tauschen) {
			return tauschen.get(id);
		}
	}
         
          public Collection<String[]> getTauschen() {
		synchronized (tauschen) {
			return tauschen.values();
		}
	}
           public Collection<Gratis> getGratis() {
		synchronized (gratis) {
			return gratis.values();
		}
	}
          
          
              public String[] getLeihen(String id) {
		synchronized (leihen) {
			return leihen.get(id);
		}
	}
         
          public Collection<String[]> getLeihen() {
		synchronized (leihen) {
			return leihen.values();
		}
	}
         
           public Codes getCode(String id) {
		synchronized (codes) {
			return codes.get(id);
		}
	}
       
         public Feature getFeature(String name) {
		synchronized (feature) {
			return feature.get(name.toLowerCase());
		}
	}
         public Usersmiley getUsersmiley(String name) {
		synchronized (usersmileys) {
			return usersmileys.get(name);
		}
	}
         
        public Kategorie getKategorie(String name) {
		synchronized (kategorie) {
			return kategorie.get(name.toLowerCase());
		}
	}
        public Collection<Kategorie> getKategorien() {
		synchronized (kategorie) {
			return kategorie.values();
		}
	}

         public Collection<Usersmiley> getUsersmileys() {
		synchronized (usersmileys) {
			return usersmileys.values();
		}
	}
 public Collection<Favs> getFavs() {
		synchronized (fav) {
			return fav.values();
		}
	}

        
        public Collection<Smiley> getSmileys2() {
		synchronized (smileys2) {
			return smileys2.values();
		}
	}

        
public Collection<Smiley> getSmileys() {
		return smileys.values();
		
	}

         public Collection<Codes> getCode() {
		synchronized (codes) {
			return codes.values();
		}
	}


public Collection<Verliehen> getVerleih() {
		synchronized (verliehen) {
			return verliehen.values();
		}
	}


	
        public Collection<Feature> getFeatures() {
		synchronized (feature) {
			return feature.values();
		}
	}

       
        
	
public static void removeFeature(String name) {
		synchronized (feature) {
			feature.remove(name.toLowerCase());
		}
	}
public static void removeSmiley(String name) {
		synchronized (smileys) {
			smileys.remove(name);
		}
	}


public static void removeFav(String name) {
		synchronized (fav) {
			fav.remove(name.toLowerCase());
		}
	}


         public static void removeKategorie(String name) {
		synchronized (kategorie) {
			kategorie.remove(name.toLowerCase());
		}
	}
         
        public void removeUsersmiley(String name) {
		synchronized (usersmileys) {
			usersmileys.remove(name);
		}
	}
        
	

        	public void removeTauschen(String name) {
		synchronized (tauschen) {
			tauschen.remove(name);
		}
	}

                
        	public void removeLeihen(String name) {
		synchronized (leihen) {
			leihen.remove(name);
		}
	}

                
                public List getButlerTipps() {
                    return butlertips;
                }
                public void removeVerliehen(String name) {
		synchronized (verliehen) {
			verliehen.remove(name);
		}
	}

      

        
                
	
        
	public String parseSmileys(Client client,String message) {
	
            Map<String, String> chatSmileys = new HashMap<String, String>();
            for(Smiley sm : Server.get().getSmileys()) {
                 if (!sm.getSyntax().isEmpty() && !sm.getPrev()) {  
                        String kcode = sm.getKCode();   
                   if (sm.getLink()) {
                  kcode = kcode.replace("<>","<>--<>|/code ?:"+sm.getID()+"<>--<>");
                  kcode = replaceLast(kcode,"<°","<>--<>|/code ?:"+sm.getID()+"<°");
                  }
        chatSmileys.put(sm.getSyntax(), kcode);
                 }
                 if (!sm.getSplit().isEmpty()) {
           for(String v : sm.getSplit().split(",")) {
            if (!v.isEmpty()) {
            Smiley smi = Server.get().getSmiley(v);
              if (!smi.getSyntax().isEmpty() && !smi.getPrev()) { 
                    String kcode = smi.getKCode();   
                   if (smi.getLink()) {
                  kcode = kcode.replace("<>","<>--<>|/code ?:"+smi.getID()+"<>--<>");
                  kcode = replaceLast(kcode,"<°","<>--<>|/code ?:"+smi.getID()+"<°");
                  }                  
                chatSmileys.put(smi.getSyntax(), kcode);
                }}}}
                 
            }
       
             List<String> userSmileys = new ArrayList<String>();
             for(String sm : client.getSmileys().split("%%")) {
                 if (!sm.isEmpty()) {
                     Usersmiley ss = Server.get().getUsersmiley(sm);
                   
                     Smiley smile = Server.get().getSmiley(String.valueOf(ss.getSMID()));
                       if (smile != null && !smile.getSyntax().isEmpty() && !smile.getPrev() && ss.getVerliehen().isEmpty()) {  
                   
                           
                           userSmileys.add(smile.getSyntax());
                   
                       }
               if (!smile.getSplit().isEmpty() && ss.getVerliehen().isEmpty()) {
           for(String v : smile.getSplit().split(",")) {
            if (!v.isEmpty()) {
            Smiley smi = Server.get().getSmiley(v);
              if (!smi.getSyntax().isEmpty() && !smi.getPrev()) {  
       userSmileys.add(smi.getSyntax());
       }}}}
             }
             }
             
             
             
             
               for(String sm : client.getSmileys2().split("%%")) {
                 if (!sm.isEmpty()) {
                     Usersmiley ss = Server.get().getUsersmiley(sm);
                if (ss != null) {
                     Smiley smile = Server.get().getSmiley(String.valueOf(ss.getSMID()));
                       if (!smile.getSyntax().isEmpty() && !smile.getPrev() && !ss.getVerliehen().isEmpty()) {  
                     userSmileys.add(smile.getSyntax());
                   
                       }
               if (!smile.getSplit().isEmpty() && !ss.getVerliehen().isEmpty()) {
           for(String v : smile.getSplit().split(",")) {
            if (!v.isEmpty()) {
            Smiley smi = Server.get().getSmiley(v);
              if (!smi.getSyntax().isEmpty() && !smi.getPrev()) {  
       userSmileys.add(smi.getSyntax());
       }}}}
             }}
             }
       int extraCount = Integer.parseInt(client.getFeature("Smiley+1")[2])+(Integer.parseInt(client.getFeature("Smiley+5")[2])*5);
           
        SmileyParser sp = new SmileyParser(chatSmileys, userSmileys);
       message = sp.parse(message, extraCount);

		return message;
	}
        
	public String getURL() {
		return "http://heaven24.de/chat/";
                // return "http://"+getSettings("BASE_HREF");
	}
        
        
           
        public void sendMailToAllAccounts(String von,String betreff,String text,String fuer) {
            List x = getAllAccounts();
            for(Object a : x) {
             String nickname = (String)a;  
             
             Client c = Server.get().getClient(nickname);
             if (c == null) {
                 c = new Client(null);
                 c.loadStats(nickname);
             }
             if (fuer.equals("wahl")) {
               if (c.getRank() >= 2) { // prüft nomierungsberechtigung. // && !c.getLC().isEmpty() && c.getLcmonths() >= 1 || c.getRank() >= 10
             Server.get().newMessage(von, nickname, betreff, text, (System.currentTimeMillis()/1000)); 
              }
                 
             } else {
             Server.get().newMessage(von, nickname, betreff, text, (System.currentTimeMillis()/1000)); 
             }
             
             
            }
            
        }
        
        public List getAllAccounts() {
            List x = new ArrayList();
              PoolConnection pcon2 = ConnectionPool.getConnection();
        PreparedStatement ps2 = null;
      
        try {
           Connection con = pcon2.connect();
           ps2 = con.prepareStatement("SELECT * FROM `accounts`");
          ResultSet rs = ps2.executeQuery();
          while (rs.next()) {
           x.add(rs.getString("name"));
         }
        }
        catch (SQLException e) {
         e.printStackTrace();
       } finally {
          if (ps2 != null)
            try {
             ps2.close();
            }
            catch (SQLException e)
            {
            }
           pcon2.close();
        }
            return x;
            
            
        }
        
            public List getAllVoter(String wahl) {
            List x = new ArrayList();
              PoolConnection pcon2 = ConnectionPool.getConnection();
        PreparedStatement ps2 = null;
      
        try {
           Connection con = pcon2.connect();
           ps2 = con.prepareStatement("SELECT * FROM `wahlenvoted` where wahl='"+wahl+"'");
          ResultSet rs = ps2.executeQuery();
          while (rs.next()) {
           x.add(rs.getString("name"));
         }
        }
        catch (SQLException e) {
         e.printStackTrace();
       } finally {
          if (ps2 != null)
            try {
             ps2.close();
            }
            catch (SQLException e)
            {
            }
           pcon2.close();
        }
            return x;
            
            
        }
        

	public boolean isInteger(String text) {
		try {
			Integer.parseInt(text);
		} catch (Exception ex) {
			return false;
		}

		return true;
	}

	public String timeStampToDate(long timestamp) {
		Date da = new Date(timestamp * 1000);
		SimpleDateFormat uhrzeits = new SimpleDateFormat("dd.MM.yyyy");
		String zeit = uhrzeits.format(da);

		return zeit;
	}
        public String timeStampToDateLong(long timestamp) {
		Date da = new Date(timestamp * 1000);
		SimpleDateFormat uhrzeits = new SimpleDateFormat("HH:mm:ss");
		String zeit = uhrzeits.format(da);

		return zeit;
	}

	public String textToIll(String text) {
		StringBuilder tex = new StringBuilder();
		int test = 1;

		for (String rcp : text.split(" ")) {
			String[] texte = { "*schnief*", "*hust*", "*schnupf*", "*röchel*" };
			String lala = texte[new Random().nextInt(texte.length)];
			String rofl = String.format(" %s ", lala);

			tex.append(test == 1 ? rofl : "").append(rcp).append(rofl);
			test++;
		}

		return tex.toString();
	}

	public String timeStampToTime(long string) {
		Date da = new Date(string * 1000);
		SimpleDateFormat uhrzeits = new SimpleDateFormat("HH:mm:ss");
		String zeit = uhrzeits.format(da);

		return zeit;
	}
        
        public String timeStampToTime2(long string) {
		Date da = new Date(string * 1000);
		SimpleDateFormat uhrzeits = new SimpleDateFormat("HH:mm");
		String zeit = uhrzeits.format(da);

		return zeit;
	}

	public void newRose(Client von, String an, String text, long time) {
		Client to = Server.get().getClient(an);
		
		if(to != null) {
			to.newRoses.add(new String[] {von.getName(), text, String.valueOf(time)});
		}
		
		query(String
				.format("insert into `roses` set von = '%s', an = '%s', text = '%s', uhrzeit = '%s'",
						von.getName(), an,
						Server.get()
								.parseSmileys(von, text.replace("'", "\\'")),
						time));
	}

	public void query(String text) {
		PoolConnection pcon = ConnectionPool.getConnection();
		PreparedStatement ps = null;

		try {
			Connection con = pcon.connect();
			ps = con.prepareStatement(text);
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (ps != null) {
				try {
					ps.close();
				} catch (SQLException e) {
				}
			}

			pcon.close();
		}
	}
        
       
	
	

	public static int count(String query) {
		PoolConnection pcon = ConnectionPool.getConnection();
		PreparedStatement ps = null;

		try {
			Connection con = pcon.connect();
			ps = con.prepareStatement(query);
			ResultSet rs = ps.executeQuery();

			if (rs.next()) {
				return rs.getInt("a");
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (ps != null) {
				try {
					ps.close();
				} catch (SQLException e) {
				}
			}

			pcon.close();
		}

		return 0;
	}
	

public void newMessage(String von, String an, String betreff,String message, long time) {
    
        
    // Bug Fixen ~ Notruf-System muss ausgenommen werden, da nicht Online!
                Client his = Server.get().getClient(von);
                if (his != null) {                    
               his.addMailHistory(an,betreff,message);
                }
                his.setLevelInfo("m",1);
    // Bug Fixen ~ Ende
    
Client target = Server.get().getClient(an);
boolean online = true;
if (target == null) {
    target = new Client(null);
    target.loadStats(an);
    online = false;
}



Client dest = Server.get().getClient(von);

if (dest == null) {
    dest = new Client(null);
    dest.loadStats(von);
  
}


if (online) {
for (Channel lol : target.getChannels()) {
target.sendButlerMessage(
lol.getName(),
"°%-1°°BB°_°m°°>_h"
+ dest.getName().replace("<", "\\<")
+ "|/serverpp \"|/w \"<r°_ hat dir gerade eine Nachricht"
+ (betreff.isEmpty() ? "" : String.format(
" (_%s_)", betreff))
+ " geschickt. Sie liegt nun in deinem °>_hBriefkasten|/m<°.°#°°>mailclosed-outerglow.png<>--<>|/m<>--<° _°BB>Jetzt lesen|/m<r°_"+(target.getMessageSound() == 1 ? "°>m-notify_001.mp<°":""));
}
target.newMessages.add(new String[] {String.valueOf(time), dest.getName(), betreff, message});
target.send(PacketCreator.postCountChanged(target.newMessages.size()));
}

dest.sentMessages.add(new String[] {String.valueOf(time), an, betreff, message});

query(String
.format("insert into `messages` set `an` = '%s', `betreff` = '%s', `text` = '%s', `time` = '%s', `von` = '%s'",
an, betreff.replace("'", "\\'"), String
.format("%s",
parseSmileys(dest, message).replace(
"'", "\\'")), time, dest.getName()));
dest.saveStats();
}

	public boolean checkCcm(String nick, Channel channel, int typ) {
		if (typ == 3) {
			return channel.getMutes().contains(String.format("|%s|", nick));
		} else {
			return channel.getCmutes().contains(String.format("|%s|", nick));
		}
	}
	
	public void newSysLogEntry(String sender, String reason) {
		String time = String.valueOf(System.currentTimeMillis()/1000);
		
		query(String.format("INSERT INTO `syslog` SET `time` = '%s', `name` = '%s', `text` = '%s'", time, sender, reason));
		syslog.put(time, new String[] {sender, reason});
	}

	static byte[] buffer;
    static String[] stringBuffer = new String[256];
    static int[] posBuffer = new int[256]; 
    
    @SuppressWarnings("deprecation")
	static String getRes(int pos) {
         int posByte = pos & 0xFF;
         if(posBuffer[posByte] != pos) {
              posBuffer[posByte] = pos;
              pos = pos < 0 ? pos & 0xFFFF : pos;
              String returnStr = new String(buffer, 0, pos, buffer[pos - 1] & 0xFF).intern();
              stringBuffer[posByte] = returnStr;
         }
         return stringBuffer[posByte];
    }
    
    static boolean load() throws IOException {
    	try {
    		InputStream resourceStream = new FileInputStream("res.class");
         
              byte decodeByte;
              int len = resourceStream.read() << 16 |  resourceStream.read() << 8 | (decodeByte = (byte)  resourceStream.read());
              len = len < 0 ? len & 0xFFFF : len;
              buffer = new byte[len];
              int offset = 0;
              
              while(len > 0) {
                   int res;
                   if((res = resourceStream.read(buffer, offset, len))  < 0) break;
                   len -= res; 
                   res += offset;
                   
                   while(offset < res) {
                        buffer[offset] = (byte) (buffer[offset++] ^ decodeByte);
                   }
              } 
              
              resourceStream.close();
    	}catch(IOException ex) {
    		return false;
    	}
              
        return true;
    }
	
	private void loadConfigs() {
        try { 
             load();
        } catch(IOException ioe) {
             ioe.printStackTrace();
        }

        
		PoolConnection pcon = ConnectionPool.getConnection();
		Statement stmt = null;

		try {
			Connection con = pcon.connect();
			stmt = con.createStatement();
			ResultSet rs = stmt
					.executeQuery("SELECT `name` FROM `accounts` ORDER BY `id`");
			rs.next();
			butler.login(rs.getString("name"));
			rs.close();
			rs = stmt.executeQuery("SELECT * FROM `channelstyles`");
			Map<Integer, ChannelStyle> channelStyles = new HashMap<Integer, ChannelStyle>();

			while (rs.next()) {
				try {
				channelStyles.put(rs.getInt("id"), new ChannelStyle(rs));
				}catch(Exception ex) {
					
				}
			}
                        rs.close();
                         System.out.println("Loading settings");
                        rs = stmt.executeQuery("SELECT * FROM `globalsettings`");
                        while (rs.next()) {
                        settings.put(rs.getString("option"), rs.getString("value"));
                        }
                        rs.close();
                           System.out.println("Loading quiz2");
			rs = stmt.executeQuery("SELECT * FROM `quiz2`");
                        while (rs.next()) {
                           
                            if (rs.getString("spielart").equals("Classic")) {
                         quiz_classic.put(rs.getString("frage").trim(),rs.getString("antwort").trim());
                            } else if (rs.getString("spielart").equals("Mathe")) {
                         quiz_mathe.put(rs.getString("frage").trim(),rs.getString("antwort").trim());
                            } else  if (rs.getString("spielart").equals("Translate")) {
                         quiz_translate.put(rs.getString("frage").trim(),rs.getString("antwort").trim());
                            }  
			}
                        rs.close();
                        
                        System.out.println("Loading smileys");
			rs = stmt.executeQuery("SELECT * FROM `sm_smileys`");
                        while (rs.next()) {
                            Smiley put = new Smiley(rs);
                            smileys.put(rs.getString("id"), put);
                            smileys2.put(put.getName2(), put); 
			}
                        rs.close();
                          System.out.println("Loading butlertipps");
			rs = stmt.executeQuery("SELECT * FROM `butler_tipps`");
                        while (rs.next()) {
                           butlertips.add(rs.getString("text"));
			}
                        rs.close();
			System.out.println("Loading kategorien");
			rs = stmt.executeQuery("SELECT * FROM `sm_kategorien`");
                        while (rs.next()) {
                            Kategorie put = new Kategorie(rs);
                            kategorie.put(rs.getString("name").toLowerCase(), put);
			}
                        rs.close();
                        System.out.println("Loading features");
			rs = stmt.executeQuery("SELECT * FROM `sm_features`");
                        while (rs.next()) {
                            Feature put = new Feature(rs);
                            feature.put(rs.getString("name").toLowerCase(), put);
			}
                        rs.close();
                        System.out.println("Loading favoriten");
			rs = stmt.executeQuery("SELECT * FROM `sm_favs`");
                        while (rs.next()) {
                            Favs put = new Favs(rs);
                            fav.put(rs.getString("id").toLowerCase(), put);
			}
                        rs.close();
                         System.out.println("Loading gratis");
			rs = stmt.executeQuery("SELECT * FROM `sm_gratis`");
                        while (rs.next()) {
                            Gratis put = new Gratis(rs);
                            gratis.put(rs.getString("name"), put);
			}
                        rs.close();
                        System.out.println("Loading codes");
			rs = stmt.executeQuery("SELECT * FROM `sm_codes`");
                        while (rs.next()) {
                            Codes put = new Codes(rs);
                            codes.put(rs.getString("codeId"), put);
			}
                        rs.close();
                         System.out.println("Loading verliehen");
			rs = stmt.executeQuery("SELECT * FROM `sm_verliehen`");
                        while (rs.next()) {
                            Verliehen put = new Verliehen(rs);
                            verliehen.put(rs.getString("usersmileyid"), put);
			}
                         rs.close();
                        System.out.println("Loading usersmileys");
			rs = stmt.executeQuery("SELECT * FROM `sm_usersmileys`");
                        while (rs.next()) {
                            Usersmiley put = new Usersmiley(rs);
                          
                            usersmileys.put(rs.getString("id"), put);
                                
			}
			rs.close();
                          System.out.println("Loading defaultmessages");
			rs = stmt.executeQuery("SELECT * FROM `default_messages`");
			while (rs.next()) {                          
				defaultmessages.put(rs.getString("name"), new String[] {rs.getString("betreff"),rs.getString("text")});
			}

			rs.close();
                        rs = stmt
					.executeQuery("SELECT `sentence` FROM `game_mix` ORDER BY RAND()");
			while (rs.next()) {
				mix.add(rs.getString("sentence"));
			}
                        
                        rs = stmt.executeQuery("select * from quiz");
                        while (rs.next()) {
                        quiz.put(rs.getString("frage"), rs.getString("antwort"));
                        }
                        rs.close();
                        rs = stmt.executeQuery("select SENTENCE,loesung from translate");
                        while (rs.next()) {
                        translate.put(rs.getString("SENTENCE"), rs.getString("loesung"));
                        }
                        rs.close();
                        
                        rs = stmt.executeQuery("select SENTENCE,loesung from mathe");
                        while (rs.next()) {
                        mathe.put(rs.getString("SENTENCE"), rs.getString("loesung"));
                        }
                        rs.close();
                        
			rs = stmt.executeQuery("SELECT * FROM `channels` ORDER BY name");

			while (rs.next()) {
				Channel channel = new Channel(rs, channelStyles.get(rs
						.getInt("style")));
				butler.joinChannel(channel);
				channel.addClient(butler);
				channels.put(rs.getString("name").toLowerCase(), channel);
			}
			rs.close();
			rs = stmt.executeQuery("SELECT * FROM `settings`");
			rs.next();
			new Settings(rs);
			rs.close();
			rs = stmt.executeQuery("SELECT * FROM `badword`");

			while (rs.next()) {
				badwords.put(rs.getString("text").toLowerCase(),
						rs.getInt("juschu"));
			}
			rs.close();
			rs = stmt.executeQuery("SELECT macro,texts FROM `macros`");
			while (rs.next()) {
				macros.put(rs.getString("macro"), rs.getString("texts"));
			}
			rs.close();
			rs = stmt.executeQuery("SELECT word,title,text FROM `help`");
			while (rs.next()) {
				help.put(rs.getString("word"), new String[] {rs.getString("title"), rs.getString("text")});
			}
			rs.close();
			rs = stmt.executeQuery("SELECT * FROM `umfragen`");
			while (rs.next()) {
				umfragen.put(rs.getString("frage"), rs.getString("antworten"));
			}
			rs.close();
			rs = stmt.executeQuery("SELECT * FROM `syslog`");
			while (rs.next()) {
				syslog.put(rs.getString("time"), new String[] {rs.getString("name"), rs.getString("text") });
			}		
			rs.close();
			rs = stmt.executeQuery("SELECT count(id) as a from accounts where lotto!=0");
			while (rs.next()) {
				setLottoJackpot(rs.getInt("a"));
			}
			rs.close();
			rs = stmt.executeQuery("select sum(knuddels) as a from accounts");
			while (rs.next()) {
				setAllKnuddels(rs.getInt("a"));
			}
			rs.close();
			rs = stmt.executeQuery("select sum(kontoKnuddels) as a from accounts");
			while (rs.next()) {
				setAllKontoKnuddels(rs.getInt("a"));
			}
			rs.close();
			rs = stmt.executeQuery("select * from werbung");
			while (rs.next()) {
				werbung.put(rs.getInt("id"),rs.getString("text"));
			}
			rs.close();
			rs = stmt.executeQuery("SELECT function,rank,description FROM `functions`");
			while (rs.next()) {
				String[] fm = new String[2];
				fm[0] = String.valueOf(rs.getInt("rank"));
				fm[1] = rs.getString("description");
				
				functions.put(rs.getString("function"), fm);
			}
			rs.close();
			rs = stmt.executeQuery("SELECT word,text FROM `butler`");
			while (rs.next()) {
				james.put(rs.getString("word"), rs.getString("text"));
			}
			rs.close();
			rs = stmt.executeQuery("SELECT von,an,text,uhrzeit FROM `news`");
			while (rs.next()) {
				news.add(new String[] {rs.getString("von"), rs.getString("an"), rs.getString("text"), rs.getString("uhrzeit")});
			}
			rs.close();
			rs = stmt
					.executeQuery("SELECT von,text FROM todo order by id desc");
			while (rs.next()) {
				todo.put(rs.getString("text"), rs.getString("von"));
			}
			rs.close();
			rs = stmt
					.executeQuery("SELECT `SENTENCE` FROM `wordmix` ORDER BY RAND()");
			while (rs.next()) {
				wordmix.add(rs.getString("SENTENCE"));
			}
			rs.close();
			rs = stmt.executeQuery("SELECT word,text,name FROM `toplisten`");
			while (rs.next()) {
				toplisten.put(rs.getString("word").toLowerCase(), new String[] { rs.getString("name"), rs.getString("text")});
			}
			rs.close();
			
			rs = stmt
					.executeQuery("SELECT * FROM statistik order by uhrzeit desc");
			while (rs.next()) {
				long bla = rs.getLong("uhrzeit");
				statistik.put(rs.getString("question"), new String[] {rs.getString("text"), rs.getString("stimmen"), String.format("%s %s", get().timeStampToDate(bla), get().timeStampToTime(bla))});
			}
			rs.close();
			rs = stmt.executeQuery("SELECT * FROM plz");
			while (rs.next()) {
				plz.put(rs.getString("plz"), new String[] {rs.getString("city"), rs.getString("bundesland")});
			}
			rs.close();
			rs = stmt.executeQuery("SELECT `name`, `sperre`, `sperrevon`, `sperrewann` FROM `accounts` WHERE `sperre` != '0' order by sperrewann desc");
			while (rs.next()) {
				long sperre = rs.getLong("sperre");
				
				lockedNicks.put(rs.getString("name"), String.format("%s~%s~%s", rs.getString("sperrevon"),
								rs.getString("sperrewann"),
								sperre == 1 ? " " : timeStampToDate(rs.getLong("sperre"))));
			}
			rs.close();
			rs = stmt.executeQuery("SELECT * FROM lotto order by id desc");
			while (rs.next()) {
				lotto.put(
						rs.getString("datum"), new String[] {rs.getString("name"), rs.getString("zahl"), rs.getString("knuddels")});
			}
			rs.close();
			rs = stmt.executeQuery("SELECT * FROM snp order by wann desc");
			while (rs.next()) {
				snp.put(rs.getLong("wann"), new String[] {rs.getString("nick"), rs.getString("von")});
			}
			rs.close();
			
			rs = stmt.executeQuery("SELECT * FROM wahlen");
			while (rs.next()) {
				elections.put(rs.getString("name"), new String[] {rs.getString("aktiv"), rs.getString("nomiPhase"), rs.getString("wahlPhase"), rs.getString("endPhase"), rs.getString("nominated"), rs.getString("wahl"), rs.getString("suglist")});
			}
			rs.close();
			rs = stmt.executeQuery("SELECT * FROM luftlinie");
			while (rs.next()) {
				luftlinie.put(
						String.format("%s~%s", rs.getString("a"),
								rs.getString("b")), rs.getInt("number"));
			}
			rs.close();
			rs = stmt.executeQuery("SELECT * FROM permissions");
			while (rs.next()) {
				permissions.put(rs.getString("permission"), rs.getString("rights"));
			}
			rs.close();
			rs = stmt.executeQuery("SELECT * FROM tutorials");
			while (rs.next()) {
				tutorials.put(rs.getInt("tutid"), new String[] {rs.getString("titel"), rs.getString("header"), rs.getString("erklarung"), rs.getString("hintergrund"), rs.getString("merke"), rs.getString("rang"), rs.getString("minuten"), rs.getString("funktion")});
			}
			rs.close();
			rs = stmt.executeQuery("SELECT * FROM wordmixrekord where 1");
			if(rs.next()) {
				WordMixRecord.setNick(rs.getString("nick"));
				WordMixRecord.setSentence(rs.getString("sentence"));
				WordMixRecord.setPoints(rs.getFloat("points"));
				WordMixRecord.setSeconds(rs.getFloat("seconds"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException e) {
				}
			}

			pcon.close();
		}
	}
@SuppressWarnings("resource")
	private void listen(int port) {
		try {
			final ServerSocket listener = new ServerSocket(port);
                        
                      //  try {
                    //        new UpdateServer();
                       // } catch(Exception c) { }
                        
                        System.out.println("_________      ______________________        "); 
                        System.out.println("__  ____/___  _______  /_____  /__  /____  __"); 
                        System.out.println("_  /    _  / / /  __  /_  __  /__  /__  / / /"); 
                        System.out.println("/ /___  / /_/ // /_/ / / /_/ / _  / _  /_/ / "); 
                        System.out.println("\\____/  \\__,_/ \\__,_/  \\__,_/  /_/  _\\__, /  "); 
                        System.out.println("                                    /____/   ");    

                        
                        System.out.println("");
			System.out.println("                                               Autor: Kokos-Ice");
                        System.out.println("");
                        System.out.println("");
                        
                        
                        File jar = new File("dist/heaven24.jar");
                        String lastModified = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss").format(jar.lastModified());
                        
                        System.out.println(String.format("Version: 2.5.6 Stable", lastModified));
                        System.out.println(String.format("JAR-DATUM: %s", lastModified));
                        
                        
			int hour = Integer.parseInt(new SimpleDateFormat("HH")
					.format(new Date()));
			int minute = Integer.parseInt(new SimpleDateFormat("mm")
					.format(new Date()));
			int minutes = 0;

			if (minute < 30) {
				minutes = 3;
			} else {
				hour++;
			}

			/*getChannel("Quiz")
					.setTopic(
							String.format(
									"Jede volle Stunde beginnt in diesem Channel das große °BB>_2Quizturnier|/h Quiz<r° für alle Mitglieder.#Die nächste Quizrunde findet um %s:%s0:00 statt.",
									hour, minutes));
*/                      System.out.println("");
			if (Settings.getCronjob() < System.currentTimeMillis() / 1000) {
                           Logger.handle(null,String.format("Update wird gestartet!"));
				tools.Cronjob.execute(null);
			} else {
				System.out.println(String.format("Nächstes Update: %s %s",
						timeStampToDate(Settings.getCronjob()),
						timeStampToTime(Settings.getCronjob())));
			}

                        System.out.println("");
                        Logger.handle(null,String.format("Chat-Server ONLINE auf Port %s.", port));
			Logger.handle(null,String.format("%s hat geraden den Chat betreten", getButler().getName()));
			onlineUsers.add(getButler().getName());
			Settings.increaseRevision(1);

			Thread settings = new Thread(new Runnable() {
				public void run() {
					while (true) {
						try {
							Reloader.run();
						} catch (ConcurrentModificationException ex) {
						}

                                                
                                                
                                                
                                                
                                                
						String time = new SimpleDateFormat("HH:mm:ss")
								.format(new Date());
						
						String[] as = time.split(":");
                                                int minutes = Integer.parseInt(as[1]);
                                                int seconds = Integer.parseInt(as[2]);
                                                if (minutes == 15 && seconds == 0 || minutes == 30  && seconds == 0 || minutes == 45  && seconds == 0 || minutes == 0  && seconds == 0) {
                                                    ButlerTipps.sendTipps();
                                                }
                                                bomb.checkBombe();
                                                
						if (time.equals("00:02:00")) {
							tools.Cronjob.execute(null);
						} else if (time.equals("20:55:00")) {
							List<String> answers = new ArrayList<String>();
						
							Object[] question = Server.umfragen.keySet().toArray();
							
							String randomQuestion = (String) question[new Random().nextInt(umfragen.size())];
							String answer = umfragen.get(randomQuestion);
							
							for(String ans : answer.split(";")) {
								answers.add(ans);
							}
							
							new Poll("", randomQuestion, answers).create();
						} else if(time.endsWith(":00:00")) {
							for (Client ob : Server.get().getClients()) {
								ob.setHealsperre((byte)0);
								ob.setImmunsperre((byte)0);
								ob.setSun((byte)0);
							}

							query("update accounts set healsperre='0', sun='0', immunsperre='0'");
						} else if(minutes %2 != 1 && time.endsWith(":00")) {
							clearIPs();
						}

						try {
							Thread.sleep(1000);
						} catch (InterruptedException ex) {
						}
					}

				}
			});

			settings.start();
                         new Action(getButler().getName(),Action.ActionType.LEIHEN,2,null,null,0); 
			
			while (true) {
				Socket socket = listener.accept();
				new SessionHandler(socket).start();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		instance.loadConfigs();
		instance.listen(2711);
	}

}